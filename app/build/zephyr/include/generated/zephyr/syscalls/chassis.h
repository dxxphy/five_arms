/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_CHASSIS_H
#define Z_INCLUDE_SYSCALLS_CHASSIS_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_chassis_set_speed(const struct device * dev, float speedX, float speedY);

__pinned_func
static inline void chassis_set_speed(const struct device * dev, float speedX, float speedY)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; float val; } parm1 = { .val = speedX };
		union { uintptr_t x; float val; } parm2 = { .val = speedY };
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_CHASSIS_SET_SPEED);
		return;
	}
#endif
	compiler_barrier();
	z_impl_chassis_set_speed(dev, speedX, speedY);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define chassis_set_speed(dev, speedX, speedY) do { 	sys_port_trace_syscall_enter(K_SYSCALL_CHASSIS_SET_SPEED, chassis_set_speed, dev, speedX, speedY); 	chassis_set_speed(dev, speedX, speedY); 	sys_port_trace_syscall_exit(K_SYSCALL_CHASSIS_SET_SPEED, chassis_set_speed, dev, speedX, speedY); } while(false)
#endif
#endif


extern void z_impl_chassis_set_angle(const struct device * dev, float angle);

__pinned_func
static inline void chassis_set_angle(const struct device * dev, float angle)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; float val; } parm1 = { .val = angle };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CHASSIS_SET_ANGLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_chassis_set_angle(dev, angle);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define chassis_set_angle(dev, angle) do { 	sys_port_trace_syscall_enter(K_SYSCALL_CHASSIS_SET_ANGLE, chassis_set_angle, dev, angle); 	chassis_set_angle(dev, angle); 	sys_port_trace_syscall_exit(K_SYSCALL_CHASSIS_SET_ANGLE, chassis_set_angle, dev, angle); } while(false)
#endif
#endif


extern void z_impl_chassis_set_gyro(const struct device * dev, float gyro);

__pinned_func
static inline void chassis_set_gyro(const struct device * dev, float gyro)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; float val; } parm1 = { .val = gyro };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CHASSIS_SET_GYRO);
		return;
	}
#endif
	compiler_barrier();
	z_impl_chassis_set_gyro(dev, gyro);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define chassis_set_gyro(dev, gyro) do { 	sys_port_trace_syscall_enter(K_SYSCALL_CHASSIS_SET_GYRO, chassis_set_gyro, dev, gyro); 	chassis_set_gyro(dev, gyro); 	sys_port_trace_syscall_exit(K_SYSCALL_CHASSIS_SET_GYRO, chassis_set_gyro, dev, gyro); } while(false)
#endif
#endif


extern chassis_status_t * z_impl_chassis_get_status(const struct device * dev);

__pinned_func
static inline chassis_status_t * chassis_get_status(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (chassis_status_t *) arch_syscall_invoke1(parm0.x, K_SYSCALL_CHASSIS_GET_STATUS);
	}
#endif
	compiler_barrier();
	return z_impl_chassis_get_status(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define chassis_get_status(dev) ({ 	chassis_status_t * syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_CHASSIS_GET_STATUS, chassis_get_status, dev); 	syscall__retval = chassis_get_status(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_CHASSIS_GET_STATUS, chassis_get_status, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
