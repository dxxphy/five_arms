/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_SBUS_H
#define Z_INCLUDE_SYSCALLS_SBUS_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern float z_impl_sbus_get_percent(const struct device * dev, uint8_t channelid);

__pinned_func
static inline float sbus_get_percent(const struct device * dev, uint8_t channelid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = channelid };
		return (float) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SBUS_GET_PERCENT);
	}
#endif
	compiler_barrier();
	return z_impl_sbus_get_percent(dev, channelid);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sbus_get_percent(dev, channelid) ({ 	float syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SBUS_GET_PERCENT, sbus_get_percent, dev, channelid); 	syscall__retval = sbus_get_percent(dev, channelid); 	sys_port_trace_syscall_exit(K_SYSCALL_SBUS_GET_PERCENT, sbus_get_percent, dev, channelid, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_sbus_get_digit(const struct device * dev, uint8_t channelid);

__pinned_func
static inline int sbus_get_digit(const struct device * dev, uint8_t channelid)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = channelid };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SBUS_GET_DIGIT);
	}
#endif
	compiler_barrier();
	return z_impl_sbus_get_digit(dev, channelid);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sbus_get_digit(dev, channelid) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SBUS_GET_DIGIT, sbus_get_digit, dev, channelid); 	syscall__retval = sbus_get_digit(dev, channelid); 	sys_port_trace_syscall_exit(K_SYSCALL_SBUS_GET_DIGIT, sbus_get_digit, dev, channelid, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
