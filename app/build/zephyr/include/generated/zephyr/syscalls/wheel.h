/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_WHEEL_H
#define Z_INCLUDE_SYSCALLS_WHEEL_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_wheel_set_speed(const struct device * dev, float speed, float angle);

__pinned_func
static inline void wheel_set_speed(const struct device * dev, float speed, float angle)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; float val; } parm1 = { .val = speed };
		union { uintptr_t x; float val; } parm2 = { .val = angle };
		(void) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_WHEEL_SET_SPEED);
		return;
	}
#endif
	compiler_barrier();
	z_impl_wheel_set_speed(dev, speed, angle);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define wheel_set_speed(dev, speed, angle) do { 	sys_port_trace_syscall_enter(K_SYSCALL_WHEEL_SET_SPEED, wheel_set_speed, dev, speed, angle); 	wheel_set_speed(dev, speed, angle); 	sys_port_trace_syscall_exit(K_SYSCALL_WHEEL_SET_SPEED, wheel_set_speed, dev, speed, angle); } while(false)
#endif
#endif


extern int z_impl_wheel_set_static(const struct device * dev, float angle);

__pinned_func
static inline int wheel_set_static(const struct device * dev, float angle)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; float val; } parm1 = { .val = angle };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_WHEEL_SET_STATIC);
	}
#endif
	compiler_barrier();
	return z_impl_wheel_set_static(dev, angle);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define wheel_set_static(dev, angle) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_WHEEL_SET_STATIC, wheel_set_static, dev, angle); 	syscall__retval = wheel_set_static(dev, angle); 	sys_port_trace_syscall_exit(K_SYSCALL_WHEEL_SET_STATIC, wheel_set_static, dev, angle, syscall__retval); 	syscall__retval; })
#endif
#endif


extern wheel_status_t * z_impl_wheel_get_speed(const struct device * dev);

__pinned_func
static inline wheel_status_t * wheel_get_speed(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (wheel_status_t *) arch_syscall_invoke1(parm0.x, K_SYSCALL_WHEEL_GET_SPEED);
	}
#endif
	compiler_barrier();
	return z_impl_wheel_get_speed(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define wheel_get_speed(dev) ({ 	wheel_status_t * syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_WHEEL_GET_SPEED, wheel_get_speed, dev); 	syscall__retval = wheel_get_speed(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_WHEEL_GET_SPEED, wheel_get_speed, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern wheel_status_t * z_impl_wheel_get_target(const struct device * dev);

__pinned_func
static inline wheel_status_t * wheel_get_target(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (wheel_status_t *) arch_syscall_invoke1(parm0.x, K_SYSCALL_WHEEL_GET_TARGET);
	}
#endif
	compiler_barrier();
	return z_impl_wheel_get_target(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define wheel_get_target(dev) ({ 	wheel_status_t * syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_WHEEL_GET_TARGET, wheel_get_target, dev); 	syscall__retval = wheel_get_target(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_WHEEL_GET_TARGET, wheel_get_target, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern void z_impl_wheel_disable(const struct device * dev);

__pinned_func
static inline void wheel_disable(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_WHEEL_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_wheel_disable(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define wheel_disable(dev) do { 	sys_port_trace_syscall_enter(K_SYSCALL_WHEEL_DISABLE, wheel_disable, dev); 	wheel_disable(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_WHEEL_DISABLE, wheel_disable, dev); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
